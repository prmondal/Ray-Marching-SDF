/*
Author: Prasenjit Mondal
*/
#define DEFAULT_SPHER_RADIUS 0.5
#define MAX_ITERATIONS 50

/////////////////////  sdfs  ////////////////////////////////
float sdPlane(vec3 p) {
	return p.y;
}

float sdSphere(vec3 p, float r) {return length(p) - r;}

float sdBox(vec3 p, vec3 b) {
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

///////////////////////////////////////////////////////

float unionPrimitive(float d1, float d2) {
	return min(d1, d2);
}

float distanceField(vec3 p) {
	float d1 = sdSphere(p, 0.5);
    float d2 = sdBox(p + vec3(sin(iTime), 0.0, 0.0), vec3(0.4));
    float d3 = sdPlane(p - vec3(0.0, -1.0, 0.0));
    
    float result = 0.0;
    result = unionPrimitive(d1, d2);
   	//result = unionPrimitive(result, d3);
    
    return result;
}

vec3 getNormal(vec3 p) {
	const float eps = 0.01;
    const vec3 dx = vec3(eps, 0.0, 0.0);
    const vec3 dy = vec3(0.0, eps, 0.0);
    const vec3 dz = vec3(0.0, 0.0, eps);
    
    float nx = distanceField(p + dx) - distanceField(p - dx);
    float ny = distanceField(p + dy) - distanceField(p - dy);
    float nz = distanceField(p + dz) - distanceField(p - dz);
    
    return normalize(vec3(nx, ny, nz));
}

vec3 calLighting(vec3 p, vec3 rd) {
	vec3 final;
    float shininess = 20.0;
    
    //first light
    vec3 lightPos = vec3(10.0, 10.0, 10.0);
    vec3 lightDiffCol = vec3(1.0, 0.0, 0.0);
    vec3 lightSpecCol = vec3(0.0, 0.0, 1.0);
    vec3 lightDir = normalize(lightPos - p);
    vec3 normal = getNormal(p);
    
    float diffuse = max(dot(normal, lightDir), 0.0);
    vec3 halfVec = normalize(-rd + lightDir);
    float specular = pow(max(0.0, dot(normal, halfVec)), shininess);
    final = lightDiffCol * diffuse + lightSpecCol * specular; 
    
    //second light
    lightPos = vec3(-10.0, 10.0, 10.0);
    lightDiffCol = vec3(0.0, 0.0, 1.0);
    lightSpecCol = vec3(0.0, 1.0, 0.0);
    lightDir = normalize(lightPos - p);
    
    diffuse = max(dot(normal, lightDir), 0.0);
    halfVec = normalize(-rd + lightDir);
    specular = pow(max(0.0, dot(normal, halfVec)), shininess);
    final += lightDiffCol * diffuse + lightSpecCol * specular;
    
    final = clamp(final, 0.0, 1.0);
    return final;
}

//ray march
vec3 rayMarch(vec3 ro, vec3 rd) {
	float t = 0.0;
	const float epsilon = 0.01;
    vec3 col = vec3(0.0);
    
    for(int i = 0; i < MAX_ITERATIONS; i++) {
        vec3 p = ro + rd * t;
        float d = distanceField(p);

        if(d < epsilon) {
            col = calLighting(p, rd);
            break;
        }

        t += d;
    }
    
    return col;
}

mat3 rotateY(float angle) {
	return mat3(
       cos(angle), 0.0, -sin(angle),
       0.0, 1.0, 0.0,
       sin(angle), 0.0, cos(angle)
    );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
 	float u = fragCoord.x * 2.0 / iResolution.x - 1.0;
 	float v = fragCoord.y * 2.0 / iResolution.y - 1.0;
 	vec2 mo = iMouse.xy / iResolution.xy;
    float time = iTime * 0.5;
    
 	vec3 right = vec3(1.0, 0.0, 0.0);
 	vec3 up = vec3(0.0, 1.0, 0.0);
 	vec3 eye = vec3(0.0, 2.0, 5.0);
 
 	vec3 p = right * u + up * v;
 	p.x *= iResolution.x/iResolution.y;
    
    //rotate camera around y-axis
    mat3 rot = rotateY(time);
    
 	vec3 ro = rot * eye;
 	vec3 rd = rot * normalize(p - eye);
    
 	vec3 col = rayMarch(ro, rd);
	fragColor = vec4(col, 0.0);
}