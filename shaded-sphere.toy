//distance fn for sphere
float sdSphere(vec3 p, float r) {return length(p) - r;}

vec3 getNormal(vec3 p) {
	const float eps = 0.05;
    const vec3 dx = vec3(eps, 0.0, 0.0);
    const vec3 dy = vec3(0.0, eps, 0.0);
    const vec3 dz = vec3(0.0, 0.0, eps);
    
    float nx = sdSphere(p + dx, 1.0) - sdSphere(p - dx, 1.0);
    float ny = sdSphere(p + dy, 1.0) - sdSphere(p - dy, 1.0);
    float nz = sdSphere(p + dz, 1.0) - sdSphere(p - dz, 1.0);
    
    return normalize(vec3(nx, ny, nz));
}

vec3 calLighting(vec3 p) {
	vec3 lightPos = vec3(10.0, 10.0, -10.0);
    vec3 lightCol = vec3(1.0, 0.0, 0.0);
    vec3 lightDir = normalize(lightPos - p);
    vec3 normal = getNormal(p);
    
    float diffuse = max(dot(normal, lightDir), 0.0);
    
    return lightCol * diffuse;
}

//ray march
vec3 rayMarch(vec3 ro, vec3 rd) {
	float t = 0.0;
	const int maxSteps = 32;
 	const float epsilon = 0.02;
    vec3 col = vec3(0.0);
    
    for(int i = 0; i < maxSteps; i++) {
        vec3 p = ro + rd * t;
        float d = sdSphere(p, 1.0);

        if(d < epsilon) {
            col = vec3(1.0) * calLighting(p);
            break;
        }

        t += d;
    }
    
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{	
 	
 	float u = fragCoord.x * 2.0 / iResolution.x - 1.0;
 	float v = fragCoord.y * 2.0 / iResolution.y - 1.0;
 	
 	vec3 right = vec3(1.0, 0.0, 0.0);
 	vec3 up = vec3(0.0, 1.0, 0.0);
 	vec3 eye = vec3(0.0, 0.0, -5.0);
 
 	vec3 p = right * u + up * v;
 	p.x *= iResolution.x/iResolution.y;
 
 	vec3 ro = eye;
 	vec3 rd = normalize(p - eye);
    
 	vec3 col = rayMarch(ro, rd);
    
	fragColor = vec4(col, 0.0);
}